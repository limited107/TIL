# 레디스가 지원하는 데이터형 
1. String
2. List
3. Set
4. Ordered Set
5. Hash

# 레디스 데이터 타입별 명령
1. String
1.1. set {키} {값}
주어진 키에 값을 저장한다. O(1)

```
set user:name "david"
user:name 키에 david 문자열을 입력
```

1.2. append {키} {값}
주어진 키가 존재하면 입력된 값을 저장되어 있는 제일 마지막 값의 뒤에 추가. O(1)

```
append user:name "jeong"
기존 키에 저장된 값에 새로운 값을 덧붙여서 저장
```

2. List
* 데이터 추가 시 O(1)
* 입력 순서가 유지됨

2.1. lpush {키} {값}+
지정된 리스트의 맨 앞쪽에 입력된 요소를 저장. O(1)

```
lpush my:list:recommand java
```

2.2. lrange {키} {시작인덱스} {종료인덱스}
지정된 리스트의 시작인덱스부터 종료인덱스 범위의 요소를 조회. O(S+N) (S: 시작 인덱스, N 범위에 속하는 요소의 개수)

```
lrange my:list:recommand 0 -1
(-1은 인덱스의 마지막 자리를 의미. 음수는 맨 마지막부터 셈)
```

3. Set
3.1. sadd {키} {값}+
지정된 셋에 입력된 값을 저장. O(N) (N: 입력된 값의 개수)

```
sadd my:test:set my
```

3.2. smembers {키}
지정된 셋에 저장된 모든 값의 목록을 조회. O(N) (N: 입력된 값의 개수)

```
smembers my:test:set
```

4. Ordered Set
셋 기능과 오름차순 정렬을 제공함(작은 값부터 큰 값으로)

4.1. zadd {키} {{가중치}{값}}+
정렬된 셋에 가중치와 값으로 이뤄진 데이터를 저장. O(log(N))
단, 이미 존재하는 값일 때는 기존의 가중치를 입력된 가중치로 덮어씀. (가중치가 아닌, 값이 중복될 때임)

```
zadd user:ranking 1 kris
zadd user:ranking 2 anna
zadd user:ranking 3 james
```

4.2. zrange {키} {시작인덱스} {종료인덱스} [withscores]
정렬된 셋의 시작인덱스부터 종료인덱스 범위에 해당하는 값들을 가중치 오름차순으로 조회. O(log(N)+M) (N: 입력되어 있는 값의 개수, M: 조회된 값의 개수)

```
zrange user:ranking 0 -1
1) "kris"
2) "anna"
3) "james"
4) "kane"
5) "jina"

zrange user:ranking 0 -1 withscores
1) "kris"
2) "1"
3) "anna"
4) "2"
5) "alice"
6) "3"
7) "james"
8) "3"
9) "kane"
10) "3"
11) "jina"
12) "4"
```

5. Hash
5.1. hset {키} {필드이름} {값}
지정한 해시에 요청한 필드와 값을 저장. O(1)
단, 요청한 필드가 존재할 때는 저장된 값이 업데이트 됨.

```
hset user:1 lastname jeong
(integer) 1
```

5.2. hget {키} {필드이름}
지정된 해시에 저장된 필드의 값을 조회. O(1)

```
hget user:1 lastname
"jeong"
```

5.3. hgetall {키}
지정된 키에 저장된 모든 필드와 값을 조회. O(N)

```
hgetall user:1
1) "lastname"
2) "jeong"
```
